{"name":"Datachannel.io","tagline":"Realtime application framework for Node.JS, with HTML5 WebRTC and Socket.io","body":"# DataChannel.IO\r\n\r\nDatachannel.io is inspired by the amazing socket.io framework and implements a real-time communication using the WebRTC technology.\r\nPeers are directly connected and datas are exchanged between clients without passing throug the server.\r\n\r\nSocket.io is only used to serve signals between clients. You can choose the namespace where socket.io serve his signals.\r\n\r\n## Installing\r\n\tnpm install datachannel.io\r\n## On the Server\r\n#### Using with Node HTTP server\r\n\tvar app = require('http').createServer(handler)\r\n\t  , io = require('datachannel.io').listen(app, 'dataChannel');\r\n\r\n\tapp.listen(80);\r\n\t\r\n\tfunction handler (req, res) {\r\n\t  fs.readFile(__dirname + '/index.html',\r\n\t  function (err, data) {\r\n\t    if (err) {\r\n\t      res.writeHead(500);\r\n\t      return res.end('Error loading index.html');\r\n\t    }\r\n\t    res.writeHead(200);\r\n\t    res.end(data);\r\n\t  });\r\n\t}\r\n#### Using with the Express 3 web framework\r\n\tvar app = require('express')()\r\n\t  , server = require('http').createServer(app)\r\n\t  , dc = require('datachannel.io').listen(server, 'dataChannel');\r\n\r\n\tapp.use(express.static(__dirname + '/client'));\r\n\r\n\tserver.listen(80);\r\n## On the Client\r\n#### index.html\r\n\t<!DOCTYPE html>\r\n\t<html>\r\n\t\t<head></head>\r\n\t\t<body>\r\n\t\t\t<script src=\"/socket.io/socket.io.js\"></script>\r\n\t\t\t<script src=\"/datachannel.io/datachannel.io.js\"></script>\r\n\t\t\t<script>\r\n\t\t\t\tvar datachannel = new DataChannel({\r\n\t\t\t\t\tsocketServer: 'http://<yourIP>'\r\n\t\t\t\t});\r\n\t\t\t</script>\r\n\t\t</body>\r\n\t</html>\r\n#### Initialization\r\nThe parameters passed to the `new DataChannel(object)` initialization is composed by:\r\n* `socketServer` [mandatory]: the address of the socket server used to serve signals between clients\r\n* `nameSpace` [optional, default as `'dataChannel'`]: namespace of the socket.io server\r\n* `rtcServers` [optional, default as `null`]: RTC Servers\r\n\r\n#### Join a Room\r\n\tdatachannel.join(\"room\");\r\n#### Leave a Room\r\n\tdatachannel.leave(\"room\");\r\n#### Send a Message\r\n\tdatachannel.in(\"room\").emit(\"chat\", {text: 'Hi!'});\r\n#### Get a Message\r\n\tdatachannel.in(\"room\").on(\"chat\", function(data) {\r\n\t\tconsole.log(data);\r\n\t});\r\n### ToDo\r\n\r\n- Test on Firefox\r\n- Implement e relay layer: in case peer-to-peer communication fails, socket.io serve the data message\r\n\r\n### Examples\r\nSome examples at:\r\n\r\n[https://github.com/marcolanaro/DataChannel.IO-Examples](https://github.com/marcolanaro/DataChannel.IO-Examples)\r\n\r\n\r\nTested on Chrome Canary","google":"UA-38768755-1","note":"Don't delete this file! It's used internally to help with page regeneration."}